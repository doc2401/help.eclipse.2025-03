<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="generator" content="Asciidoctor 2.0.23">
<title>Core Build System</title>
<link rel="stylesheet" href="../helpadoc.css">
<link rel="stylesheet" href="../font-awesome/css/font-awesome.css">
</head>
<body class="article">
<script type="text/javascript" src="PLUGINS_ROOT/org.eclipse.help/livehelp.js"></script>
<div id="header">
<h1>Core Build System</h1>
</div>
<div id="content">
<div class="paragraph">
<p>The Core Build System is the successor of the legacy Managed Build
System.</p>
</div>
<div class="paragraph">
<p>The classical Makefile projects are based on the Managed Build System.
Managed Build projects can generate a Makefile based on GUI controlled
build configurations in the project properties. The user can
manage the separate build configurations for Run and Debug. There is a
notion of "active" build configuration, which is the one that gets
built when the build button is pressed.</p>
</div>
<div class="paragraph">
<p>The Core Build System is the basis for CMake projects and Core Build
Makefile projects. The CDT LaunchBar plays a central role and is used
for building and launching the program. The philosophy is "Build for
launch". It simplifies the flow a lot.</p>
</div>
<div class="paragraph">
<p>These are the main differences compared with the Managed Build System:</p>
</div>
<div class="ulist">
<ul>
<li>
<p>No build configurations. No build file (Makefile or
CMakeLists.txt) generation. The user writes it by hand. A
"helloworld" example build file can be created for new projects.</p>
</li>
<li>
<p>Each new project is created with a launch configuration tied to it.</p>
</li>
<li>
<p>Build settings are presented in the launch configuration Build Settings tab.</p>
</li>
<li>
<p>The LaunchBar determines Run or Debug mode for building. There is no
concept of an active build configuration as there is in Managed
Build projects.</p>
</li>
<li>
<p>Auto discovery. The project&#8217;s macro definitions and include paths,
needed for indexing, are extracted from the build step. For CMake
projects, data is obtained from the generated JSON file. For Makefile
projects, data is extracted from the build step console output.</p>
</li>
<li>
<p>Simpler wizards. Creation of a CMake project is via a simple one page
wizard. Using existing code is simply done by creating a new project
on top of the existing code. It is not necessary to import the project
(<span class="menuseq"><b class="menu">File</b>&#160;<i class="fa fa-angle-right caret"></i> <b class="menuitem">Import&#8230;&#8203;</b></span>).</p>
</li>
</ul>
</div>
<div class="paragraph">
<p>Core Build connects CDT projects to industry standard external build
systems like CMake, Makefile, and Meson. The removal of the CDT
specific build configurations allow Core Build projects to be
easily be shared with other IDEs, command-line use, and Continuous
Integration (CI) flows.</p>
</div>
<div class="paragraph">
<p>Thanks to the auto discovery, the indexing of the C/C++ code has
improved, because all compilation flags are known per file. This is especially
beneficial for projects that use multiple toolchains in one project.</p>
</div>
<div class="paragraph">
<p><span class="icon"><i class="fa fa-arrow-circle-right"></i></span> <a href="new_cmake_proj.htm">Next: Creating a CMake project</a></p>
</div>
</div>
<div id="footer">
<div id="footer-text">
</div>
</div>
<hr>
<p><small>Copyright (c) 2000, 2025 Contributors to the Eclipse Foundation</small></p>
</body>
</html>